/****************************************************************************
**
** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\page qtquick-input-topic.html
\title Important Concepts In Qt Quick - User Input
\brief Overview of user input concepts

Being able to respond to user-input is a fundamental part of user-interface
design.  Depending on the use-case that an application solves, and the
form-factor of the device that the application runs on, the best way
to receive user-input may be different.

\section1 Touch

Allowing users to physically touch a screen to interact with an application is
a popular user-interface paradigm on portable devices like smartphones and
tablets.

Qt Quick was designed specifically with touch-driven user-interfaces in mind,
and thus touch events are supported in various visual object types, from
\l{Flickable} lists to the generic \l{MultiPointTouchArea} type, as well as
in the \l{MouseArea} type (which will be documented thoroughly in a proceeding
section).

\section1 Motion Gestures

Detecting gestures with an accelerometer, or through camera-based gesture
recognition, can allow users to interact with an application without requiring
their full and undevided attention.  It can also provide a more interactive
and engaging experience.

Qt Quick itself does not offer first-class support for motion gestures, however
another QML add-on module which provides support for gestures, which uses
Qt Quick and integrates with Qt Quick's visual canvas does exist.  See the
Qt Sensors module documentation for more information on the topic.

\section1 Keyboard

Supporting input from a keyboard is a vital component of the user-interface of
many applications.

XXX TODO: generic keypress event handling documentation?

Qt Quick also provides visual object types which automatically receive keyboard
events and key-presses, and displays the appropriate text.  Please see the
documentation about \l{qtquick-input-textinput.html}{text input} for
in-depth information on the topic.

\section1 Mouse

The computer mouse is still a very important vector for user-input.  Detecting
and reacting to clicks and presses according to their position is a fundamental
concept in user-interface design.

Qt Quick provides the MouseArea visual object type which automatically receives
mouse events (including clicks and wheel events) which allows developers to
create custom user-interface objects to handle mouse input.  Please see the
documentation about \l{qtquick-input-mouseevents.html}
{mouse events in Qt Quick} for more information on the topic.

\section1 Focus

Most user-interfaces have multiple visual objects, but usually only one object
has focus (that is, receives key-press events) at any time.  Qt Quick has
support for complex focus specification.  See the documentation about
\l{qtquick-input-focus.html}{keyboard focus in Qt Quick} for more
information on this topic.

*/

