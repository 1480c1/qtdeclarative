/****************************************************************************
**
** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\page qtquick-visualcanvas-topic.html
\title Important Concepts In Qt Quick - The Visual Canvas
\brief Overview of visual canvas concepts

The visual canvas provided by the Qt Quick is a two dimensional canvas with
z-ordering.

\section1 Coordinate System

The top-left pixel in the Qt Quick coordinate system is the [0, 0] pixel.
The coordinate system of a child item is relative to its visual parent item.
See the documentation on the
\l{qtquick-visualcanvas-coordinates.html}{Coordinate System} for
in-depth information about the coordinate system utilized by Qt Quick.

\section1 Visual Parent

There are two separate kinds of parenting in a QML application which uses
Qt Quick.  The first kind is the ownership-parent (also known as the QObject
parent) which determines object lifetime semantics.  The second kind is the
visual parent which determines where on the canvas an item is drawn, and also
certain properties (for example, opacity applies to visual children).

In almost all cases, the visual parent is identical to the ownership-parent.
See the documentation about the \l{qtquick-visualcanvas-visualparent.html}
{Visual Parent}for more in-depth information on the topic.

\section1 Scene Graph

Modern computer systems and devices use OpenGL to draw graphics.  Qt Quick
requires OpenGL and it is used to display applications developed with
Qt Quick in QML.  In particular, Qt Quick defines a scene graph which is then
rendered.  See the documentation about the
\l{qtquick-visualcanvas-scenegraph.html}{Scene Graph} for in-depth
information about the concept of a scene graph and why it is beneficial, and
about the scene graph implementation provided by Qt Quick.

*/
