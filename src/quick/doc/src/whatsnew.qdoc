/****************************************************************************
**
** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\title QtQuick Module Release Notes
\page qtquick-releasenotes.html
\inqmlmodule QtQuick 2.0

\section1 Qt 5.0 - QtQuick C++ Module

The QtQuick C++ module is new in Qt 5. It provides the visual canvas and scenegraph backend
as well as the QtQuick QML module for QML application development.

(Prior to Qt 5, the QtQuick QML module was provided by the QtDeclarative C++ module. In Qt 5
the QtDeclarative module has been replaced by the new QtQml and QtQuick C++ modules.)

As of Qt 5, the QtQuick module is based on an OpenGL scenegraph. The following C++ classes replace
their \c QDeclarative* equivalents from QtQuick 1:

\list
\li QQuickView
\li QQuickCanvas
\li QQuickItem
\li QQuickPaintedItem
\endlist


\section1 Qt 5.0 - QtQuick QML Module

The QtQuick 2.0 QML module is a major update.

Below are the additions and changes in QtQuick 2.0:

\section2 Graphics and Animations

\list
\li New \l Canvas type for drawing. This provides a HTML5 canvas like API along with some additional features.
    \list
    \li Supports two render targets: \c Canvas.Image and \c Canvas.FramebufferObject.
    \li Supports background thread rendering.
    \li Supports tiled canvas rendering.
    \li Supports most of the HTML5 context2d APIs.
    \endlist
\li \l Image:
    \list
    \li New \l{Image::}{horizontalAlignment} and \l{Image::}{verticalAlignment} properties.
    \li New \c Image.Pad enum value for \l{Image::}{fillMode} that does not transform the image, unlike other \l{Image::}{fillMode} enum values.
    \li Modifying the \l{Image::}{sourceSize} now fits the image to the size, maintaining aspect ratio.
    \endlist
\li New SpriteSequence type renders animated sprites and can transition between animations.
\li New \l Sprite type which represents each animation in a SpriteSequence.
\li New AnimatedSprite type for drawing single sprite animations.
\li New PathArc, PathCurve and PathSvg types:
    \list
    \li PathArc and PathCurve support the construction of arcs and catmull-rom curves, respectively. PathSvg supports the construction of a path from a SVG string.
    \endlist
    \endlist
\endlist


\section2 Text

\list
\li \l Text:
    \list
    \li When \c Text.AutoText format is enabled, the text object will automatically switch to \c Text.StyledText instead of \c Text.RichText.
    \li New \l{Text::}{onLineLaidOut} handler is called for every line during the layout process to give the option of positioning and/or resizing lines as they are laid out.
    \li New \l{Text::}{doLayout()} method will trigger the text layout from Javascript.
    \li \c Text.RightElide is now supported where text spans multiple lines.
    \li New \l{Text::}{fontSizeMode} property allows text to be fitted to the item size.
    \li New \l{Text::}{minimumPixelSize} and \l {Text::}{minimumPointSize} properties can be used to specify a lower bound when auto-fitting.
    \endlist
\li TextEdit:
    \list
    \li \l{TextEdit::}{textFormat} property now defaults to \c PlainText instead of \c AutoText.
    \endlist
\li TextInput:
    \list
    \li New \l{TextInput::}{wrapMode} property.
    \li New \l{TextInput::}{horizontalAlignment} and \l{TextInput::}{verticalAlignment} properties.
    \li \l{TextInput::}{positionAt()} method now takes a y parameter.
    \endlist
\endlist

\section2 User Input

\list
\li New MultiPointTouchArea type processes multi-point touches and provides information on touch points including position, pressure and velocity.
\li MouseArea:
    \list
    \li Wheel events are now supported.
    \li The \l{MouseArea::}{onClicked}, \l{MouseArea::}{onDoubleClicked} and \l{MouseArea::}{onPressAndHold} signals are now propagated differently to \l{MouseArea::}{onPressed}. These will now be propagated to the highest-stacking-order enabled MouseArea that has a handler for them. You can still ignore these events in the handler to let them pass through; this behavior is triggered with the new property \l{MouseArea::}{propagateComposedEvents}.
    \li New \l{MouseArea::}{propagateComposedEvents} property sets whether composed events are propagated to other mouse areas.
    \endlist
\endlist

\section2 Specialised Containers

\list
\li Flickable:
    \list
    \li New \l{Flickable::}{rebound} property specifies the transition to be applied when a flickable snaps back to its bounds.
    \li New \l{Flickable::}{topMargin}, \l{Flickable::}{bottomMargin}, \l{Flickable::}{leftMargin}, \l{Flickable::}{rightMargin} allow extra margin space to be specified for a flickable. This can be used, for example, to implement the pull-to-refresh functionality for a list.
    \li New \l{Flickable::}{originX} and \l{Flickable::}{originY} properties provide the top left position of the content item.
    \li New \l{Flickable::}{dragging}, \l{Flickable::}{draggingHorizontally} and \l{Flickable::}{draggingVertically} properties provide information on whether a flickable is currently being dragged.
    \endlist
\endlist

\section2 Positioners (Row, Column, Grid, Flow types):

\list
\li The \c add and \c move transitions can now access a ViewTransition attached property (see the ViewTransition documentation for examples) and can now animate arbitrary item properties (instead of being restricted to animating an item's position).
\li New \l Positioner type provides \c index, \c isFirstItem and \c isLastItem attached properties for items within positioners.
\li All \c spacing properties on positioners now use real numbers instead of integers.
\li Grid:
    \list
    \li New \l{Grid::}{rowSpacing} and \l{Grid::}{columnSpacing} properties.
    \endlist
\endlist

\section2 Models and Views

\list
\li ListView and GridView:
    \list
    \li New transition support for animating the adding, removing and moving of items in a ListView or GridView. See the ViewTransition documentation for details.
    \li New \c verticalLayoutDirection property enables items to be laid out from bottom-to-top using the new \c BottomToTop enum value.
    \li New \c headerItem and \c footerItem properties provide access to the instantiated header and footer items.
    \li The \c cacheBuffer property now has a non-zero default.
    \li Delegates in the cache buffer are now created asynchronously.
    \li Setting a \c RightToLeft layout now also reverses the \c preferredHighlightBegin and \c preferredHighlightEnd.
    \endlist
\li ListView only:
    \list
    \li New \l{ListView::}{section.labelPositioning} property can fix the current section label to the start of the view, and the next section label to the end of the view, so that labels do not scroll while section items are still in view.
    \endlist
\li PathView:
    \list
    \li New \l{PathView::}{currentItem} property.
    \li New \l{PathView::}{maximumFlickVelocity} property.
    \endlist
\endlist

\section2 Utility types

\list
\li \l Loader:
    \list
    \li New \l{Loader::}{asynchronous} property allows components to be instantiated with lower chance of blocking.  If source is used with \e {asynchonous: true} the component will be compiled in a background thread.
    \li New \l{Loader::}{active} property delays instantiation of a \l Loader object's \l{Loader::}{item}.
    \li New \l{Loader::}{setSource()} method can load an object with specific initial property values, similar to \l Component::createObject().
    \li The \c sourceChanged signal is now only emitted when the \l{Loader::}{source} changes and the \c sourceComponentChanged signal is now only emitted when the \l{Loader::}{sourceComponent} changes. (Previously Loader emitted both signals when only one of the properties had changed.)
    \endlist
\li \l Binding:
    \list
    \li This type can now be used as a value source, and will also restore any previously set binding when its \l{Binding::}{when} clause becomes false.
    \endlist
\endlist


\section1 Qt 5.0 - Additional QML Modules

\section2 QtQuick.Particles

The new QtQuick.Particles module provides particle system support for creating a variety of 2D particle systems. See the QtQuick.Particles documentation for comprehensive details.

\section2 QtQuick.XmlListModel

XmlListModel has now moved into its own module, QtQuick.XmlListModel. This module must now be imported to use the XmlListModel and XmlListModelRole types.


*/
