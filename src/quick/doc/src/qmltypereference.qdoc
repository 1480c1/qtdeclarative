/****************************************************************************
**
** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\page qtquick-qmltypereference.html
\title QML Types Provided By Qt Quick
\brief Description of the QML types provided by the Qt Quick module

This page contains links to documentation for every QML type provided by the
Qt Quick module, organized according to category and purpose.  All of the types
are based on the basic QML language object types: \l{QML::QtObject} and
\l{QML::Component}.  Both of those basic types are available from the QtQuick
import.

\section1 Visual Types

\list
\li \l {Item} - Basic visual object type inherited by visual object types (visual items)
\li \l {Rectangle} - A rectangle type
\li \l {Image} - For incorporating bitmaps into a scene
\li \l {BorderImage} - Allows the use of images as borders
\li \l {AnimatedImage} - For playing animations stored as an animated GIF
\li \l {AnimatedSprite} - For playing animations stored as a series of frames
\li \l {Text} - For inserting formatted text into a scene
\li \l {TextInput} - Captures user key input
\li \l {TextEdit} - Displays multiple lines of editable formatted text
\li \l {Canvas} - Provides a 2D canvas type similar to the HTML5 canvas
\li \l {Window} - Provides a top-level window
\endlist

Visual object utility types
\list
\li \l {Accessible} - Attached property to make components accessible
\li \l {Gradient} - For defining a color gradient
\li \l {GradientStop} - Used to define a color within a \l {Gradient}
\li \l {SystemPalette} - Provides access to the Qt palettes
\li \l {Screen} - Provides information about the screen on which an \l {Item} is displayed
\li \l {Sprite} - Specifies sprite animations
\li \l {SpriteSequence} - For playing and transitioning between multiple animations stored as a series of frames
\li \l {SpriteGoal} - For changing the state of a Sprite
\endlist

\section1 User Input Types

\list
\li \l {MouseArea} - Sets up an area for mouse interaction
\li \l {Keys} - Provides components with attached properties to handle key input.
\li \l {KeyNavigation} - Supports key navigation by arrow keys
\li \l {FocusScope} - Element that mediate keyboard focus changes
\li \l {Flickable} - Provides a surface that can be "flicked"
\li \l {Flipable} - Provides a surface that produces "flipping" effects
\li \l {PinchArea} - Enables simple pinch gesture handling
\li \l {MultiPointTouchArea} - Enables handling of multiple touch points
\li \l {Drag} - For specifying drag and drop events for visual items
\li \l {DropArea} - For specifying drag and drop event handling in an area
\li \l {TextInput} - Captures user key input
\li \l {TextEdit} - Displays multiple lines of editable formatted text
\endlist

Text input utility types
\list
\li \l {IntValidator} - Validates values as integers
\li \l {DoubleValidator} - Validates real values
\li \l {RegExpValidator} - Validator for string regular expressions
\li \l {FontLoader} - Loads fonts by name or URL
\endlist

User input events
\list
\li \l {TouchPoint} - Describes a touch point in a MultiPointTouchArea
\li \l {PinchEvent} - Specifies information about a pinch event
\li \l {WheelEvent} - Provides information about a mouse wheel event
\li \l {MouseEvent} - Provides information about a mouse click event
\li \l {KeyEvent} - Provides information about a key press event
\li \l {DragEvent} -Provides information about a drag event
\endlist

\section1 Positioning

\list
\li \l {Positioner} - Provides information about where an Item exists within a layout
\li \l {Column} - Arranges its children vertically
\li \l {Row} - Arranges its children horizontally
\li \l {Grid} - Positions its children in a grid
\li \l {Flow} - Positions its children with wrapping support
\li \l {Repeater} - Uses a model to create multiple components
\li \l {qtquick-concepts-positioning-anchors.html}{Anchor} - Allows visual items to be anchored together
\li \l {LayoutMirroring} - Attached property used to mirror layout behavior
\endlist

\section1 States, Transitions And Animations

States
\list
\li \l {State} - Defines sets of configurations of objects and properties
\li \l {PropertyChanges} - Describes property changes within a state
\li \l {StateGroup} - Contains a set of states and state transitions
\li \l {StateChangeScript} - Allows script binding in a state
\li \l {ParentChange} - Re-parent an Item in a state change
\li \l {AnchorChanges} - Change the anchors of an item in a state

Transitions and Animations
\endlist
\list
\li \l {Transition} - Animates transitions during state changes
\li \l {ViewTransition} - Specifies items under transition in a view
\li \l {SequentialAnimation} - Runs animations sequentially
\li \l {ParallelAnimation} - Runs animations in parallel
\li \l {Behavior} - Specifies a default animation for property changes
\li \l {PropertyAction} - Sets immediate property changes during animation
\li \l {PauseAnimation} - Introduces a pause in an animation
\li \l {SmoothedAnimation} - Allows a property to smoothly track a value
\li \l {SpringAnimation} - Allows a property to track a value in a spring-like motion
\li \l {ScriptAction} - Runs scripts during an animation
\endlist

Elements that animate properties based on data types
\list
\li \l {PropertyAnimation} - Animates property changes
\li \l {NumberAnimation} - Animates properties of type qreal
\li \l {Vector3dAnimation} - Animates properties of type QVector3d
\li \l {ColorAnimation} - Animates color changes
\li \l {RotationAnimation} - Animates rotations
\li \l {ParentAnimation} - Animates parent changes
\li \l {AnchorAnimation} - Animates anchor changes
\li \l {PathAnimation} - Animates position along a path
\endlist

Elements that provide lower-level animation control
\list
\li \l {PathInterpolator} - Allows manual animation along a path
\li \l {AnimationController} - Allows manual control of animation progress
\endlist

Animation paths
\list
\li \l {Path} - Defines a path used by \l {PathView}
\li \l {PathLine} - Defines a line in \l {Path}
\li \l {PathQuad} - Defines a quadratic Bezier curve in a \l {Path}
\li \l {PathCubic} - Defines a cubic Bezier curve in a \l {Path}
\li \l {PathArc} - Defines an arc in a \l {Path}
\li \l {PathCurve} - Defines a point on a Catmull-Rom curve in a \l {Path}
\li \l {PathSvg} - Defines a sub-path specified as a SVG path data string in a \l {Path}
\li \l {PathAttribute} - Allows the setting of attributes along a \l {Path}
\li \l {PathPercent} - Modifies the item distribution along a \l {Path}
\endlist

Visual object transformations
\list
\li \l {Transform} - Allows specification of advanced transformations on Items
\li \l {Scale} - Assigns item scaling behaviors
\li \l {Rotation} - Assigns item rotation behaviors
\li \l {Translate} - Assigns item translation behaviors
\endlist

\section1 Interceptors

\list
\li \l {Connections} - Explicitly connects signals and signal handlers
\li \l {Binding} - Binds any value to any property
\li \l {Timer} - Provides timed triggers
\li \l {Behavior} - Triggers animations when a property value is set
\endlist

\section1 Model/View Types And Data Storage And Access

Models And Model Data
\list
\li \l {QtQuick2::ListModel}{ListModel} - Defines a list of data
\li \l {QtQuick2::ListElement}{ListElement} - Defines a data item in a \l {QtQuick2::ListModel}{ListModel}
\li \l {VisualItemModel} - Contains items that already defines its own visual delegate
\li \l {VisualDataModel} - Encapsulates a model and a delegate
\li \l {VisualDataGroup} -Encapsulates a filtered set of visual data items
\li \l {XmlListModel} - Specifies a model using XPath expressions
\li \l {XmlRole} - Specifies a role for an \l {XmlListModel}
\li \l {FolderListModel} - Provides a model of the contents of a file system folder
\li \l {Repeater} - Provides a simple model to create multiple visual objects
\endlist

Views
\list
\li \l {ListView} - Provides a list visualization of a model
\li \l {GridView} - Provides a grid visualization of a model
\li \l {PathView} - Visualizes a model's contents along a path. See \l {Path Definition}{Path Elements} for more information.
\li \l {Package} - Collection that enables sharing of items within different views
\endlist

Data Storage
\list
\li \l {LocalStorage} - Module API providing simplified SQL access
\endlist

\section1 Particles And Graphical Effects

\list
\li \l {ShaderEffect} - Allows GLSL shaders to be used as graphical effects
\li \l {ShaderEffectSource} - Usable as a texture in ShaderEffect
\li \l {GridMesh} - Generates a gird mesh of vertices for use by ShaderEffect
\li The \l{QtQuick.Particles 2} module provides a set of Particle System types for QtQuick 2
\endlist

\section1 Canvas (similar to HTML5 canvas)

\list
\li \l {Canvas} - Provides a 2D canvas type similar to the HTML5 canvas
\li \l {Context2D} - Provides 2D context for shapes on a Canvas item
\li \l {CanvasGradient} - Allows specification of a gradient on a Canvas
\li \l {CanvasPixelArray} - Allows specification of a pixel array for use in a Canvas
\li \l {CanvasImageData} - Allows specification of image data for use in a Canvas
\li \l {TextMetrics} - Provides text and font measurement data for use in a Canvas
\endlist

\section1 Dynamic Instantiation Enablers

\list
\li \l {QML::Component} - Provides a type-instance factory allowing dynamic instantiation
\li \l {Loader} - Controls the loading of items or components
\endlist

\section1 Threading

\list
\li \l {WorkerScript} - Enables the use of threads in a Qt Quick application
\endlist

*/
