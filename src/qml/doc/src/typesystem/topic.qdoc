/****************************************************************************
**
** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/
/*!
\page qtqml-typesystem-topic.html
\title The QML Type System
\brief Description of the QML type system

The types which may be used in the definition of an object hierarchy in a QML
document can come from various sources.  They may be:

\list
\li provided natively by the QML language
\li registered via C++ by QML modules
\li provided as QML documents by QML modules
\endlist

Furthermore, application developers can provide their own types, either by
registering C++ types directly, or by defining reusable components in QML
documents which can then be imported.

Wherever the type definitions come from, the engine will enforce type-safety
for properties and instances of those types.


\section1 Basic Types

The QML language has built-in support for various primitive types including
integers, double-precision floating point numbers, strings, and boolean values.
Objects may have properties of these types, and values of these types may be
passed as arguments to methods of objects.

See the \l{qtqml-typesystem-basictypes.html}{Basic Types} documentation for
more information about basic types, or the \l{qtqml-documents-properties.html}
{QML Documents - Object Properties} documentation for more information about
other available property types.


\section1 JavaScript types

JavaScript objects and arrays are supported by the QML engine. Any standard
JavaScript type can be created and stored using the generic \l var type.

For example, the standard \c Date and \c Array types are available, as below:

\qml
import QtQuick 2.0

Item {
    property var theArray: new Array()
    property var theDate: new Date()

    Component.onCompleted: {
        for (var i=0; i<10; i++)
            theArray.push("Item " + i)
        console.log("There are", theArray.length, "items in the array")
        console.log("The time is", theDate.toUTCString())
    }
}
\endqml

See \l {Using JavaScript Expressions with QML} for more details.


\section1 QML Object Types

A QML object type is a type from which a QML object can be instantiated. QML
object types are derived from \l QtObject, and are provided by QML modules.
Applications can import these modules to use the object types they provide.
The \c QtQuick module provides the most common object types needed to create
user interfaces in QML.

Finally, every QML document implicitly defines a QML object type, which can be
re-used in other QML documents.  See the documentation about
\l{qtqml-typesystem-objecttypes.html}{object types in the QML type system} for
in-depth information about object types.

\section1 Property Modifier Types

A property modifier type is a special kind of QML object type.  A property
modifier type instance affects a property (of a QML object instance) which it
is applied to.  There are two different kinds of property modifier types:
\list
\li property value write interceptors
\li property value sources
\endlist

A property value write interceptor can be used to filter or modify values as
they are written to properties.  Currently, the only supported property
value write interceptor is the \l Behavior type provided by the \c QtQuick
import.

A property value source can be used to automatically update the value of a
property over time.  Clients can define their own property value source types.
The various \l{qtquick-statesanimations-animations.html}{property animation}
types provided by the \c QtQuick import are examples of property value
sources.

Property modifier type instances can be created and applied to a property of
a QML object through the "<ModifierType> on <propertyName>" syntax, as the
following example shows:

\qml
import QtQuick 2.0

Item {
    width: 400
    height: 50

    Rectangle {
        width: 50
        height: 50
        color: "red"

        NumberAnimation on x {
            from: 0
            to: 350
            loops: Animation.Infinite
            duration: 2000
        }
    }
}
\endqml

See the documentation on \l QQmlPropertyValueSource for information about how
to define your own property value source types.

*/
