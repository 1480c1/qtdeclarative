/****************************************************************************
**
** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/
/*!
\page qtqml-typesystem-topic.html
\title The QML Type System
\brief Description of the QML type system

The types which may be used in the definition of an object hierarchy in a QML
document can come from various sources.

\list
\li They may be provided natively by the QML language
\li They may be registered by C++ plugins for QML
\li They may be provided as QML documents by a plugin developer
\endlist

Furthermore, application developers can provide their own types, either by
registering C++ types directly, or by defining reusable components in QML
documents which can then be imported.

Wherever the type definitions come from, the engine will enforce type-safety
for properties and instances of those types.


\section1 Basic Types

The Qt QML module provides support for various primitive types including
integers, double-precision floating point numbers, strings, and boolean values.
Objects may have properties of these types, and values of these types may be
passed as arguments to methods of objects.

See the \l{qtqml-basictypes.html}{Basic Types} documentation for more
information about basic types, or the \l{qtqml-documents-properties.html}
{QML Documents - Object Properties} documentation for more information about
other available property types.


\section1 JavaScript types

JavaScript objects and arrays are supported by the QML engine. Any standard JavaScript type can be created and stored using the generic \l var type.

For example, the standard \c Date and \c Array types are available, as below:

\qml
import QtQuick 2.0

Item {
    property var theArray: new Array()
    property var theDate: new Date()

    Component.onCompleted: {
        for (var i=0; i<10; i++)
            theArray.push("Item " + i)
        console.log("There are", theArray.length, "items in the array")
        console.log("The time is", theDate.toUTCString())
    }
}
\endqml

See \l {Using JavaScript Expressions with QML} for more details.


\section1 QML Object Types

A QML object type is a type from which a QML object can be instantiated.




*/
