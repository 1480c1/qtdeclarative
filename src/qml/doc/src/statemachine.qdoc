/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
  \group qmlstatemachine
  \page qmlstatemachine.html
  \title The Declarative State Machine Framework
  \brief An overview of the Declarative State Machine Framework for constructing and executing state graphs.

  \ingroup frameworks-technologies

  \tableofcontents

  The Declarative State Machine Framework provides classes for creating and executing
  state graphs in QML. The concepts and notation are based on those from Harel's
  \l{http://www.wisdom.weizmann.ac.il/~dharel/SCANNED.PAPERS/Statecharts.pdf}
  {Statecharts: A visual formalism for complex systems}, which
  is also the basis of UML state diagrams. The semantics of state machine
  execution are based on \l{State Chart XML: State Machine Notation for
  Control Abstraction}{State Chart XML (SCXML)}.

  Statecharts provide a graphical way of modeling how a system reacts to
  stimuli. This is done by defining the possible \e states that the system can
  be in, and how the system can move from one state to another (\e transitions
  between states). A key characteristic of event-driven systems (such as Qt
  applications) is that behavior often depends not only on the last or current
  event, but also the events that preceded it. With statecharts, this
  information is easy to express.

  The Declarative State Machine Framework provides an API and execution model that can
  be used to effectively embed the elements and semantics of statecharts in Qml
  applications. The framework integrates tightly with Qt's meta-object system;
  for example, transitions between states can be triggered by signals, and
  states can be configured to set properties and invoke methods on QObjects.
  Qt's event system is used to drive the state machines.

  The state graph in the Declarative State Machine Framework is hierarchical. States
  can be nested inside of other states, and the current configuration of the
  state machine consists of the set of states which are currently active.
  All the states in a valid configuration of the state machine will
  have a common ancestor.

  For user interfaces with multiple visual states, independent of the
  application's logical state, consider using QML States and Transitions.

  \section1 QML types in the Declarative State Machine Framework

  These QML types are provided by QML for creating event-driven state machines.

  \annotatedlist qmlstatemachine

  \section1 A Simple State Machine

  To demonstrate the core functionality of the State Machine API, let's look
  at a small example: A state machine with three states, \c s1, \c s2 and \c
  s3. The state machine is controlled by a single QPushButton; when the button
  is clicked, the machine transitions to another state. Initially, the state
  machine is in state \c s1. The statechart for this machine is as follows:

    \image statemachine-button.png
    \omit
    \caption This is a caption
    \endomit

  The following snippet shows the code needed to create such a state machine.

  \snippet qml/statemachine/statemachine-button.qml 0

  The state machine executes asynchronously, i.e. it becomes part of your
  application's event loop.

  \section1 State Machines That Finish

  The state machine defined in the previous section never finishes. In order
  for a state machine to be able to finish, it needs to have a top-level \e
  final state (FinalState object). When the state machine enters a top-level
  final state, the machine will emit the \l{StateBase::finished}{finished}
  signal and halt.

  All you need to do to introduce a final state in the graph is create a
  FinalState object and use it as the target of one or more transitions.

  \section1 Sharing Transitions By Grouping States

  Assume we wanted the user to be able to quit the application at any time by
  clicking a Quit button. In order to achieve this, we need to create a final
  state and make it the target of a transition associated with the Quit
  button's clicked() signal. We could add a transition from each of \c s1, \c
  s2 and \c s3; however, this seems redundant, and one would also have to
  remember to add such a transition from every new state that is added in the
  future.

  We can achieve the same behavior (namely that clicking the Quit button quits
  the state machine, regardless of which state the state machine is in) by
  grouping states \c s1, \c s2 and \c s3. This is done by creating a new
  top-level state and making the three original states children of the new
  state. The following diagram shows the new state machine.

    \image statemachine-button-nested.png
    \omit
    \caption This is a caption
    \endomit

  The three original states have been renamed \c s11, \c s12 and \c s13 to
  reflect that they are now children of the new top-level state, \c s1.  Child
  states implicitly inherit the transitions of their parent state. This means
  it is now sufficient to add a single transition from \c s1 to the final
  state \c s2. New states added to \c s1 will also automatically inherit this
  transition.

  All that's needed to group states is to specify the proper parent when the
  state is created. You also need to specify which of the child states is the
  initial one (i.e. which child state the state machine should enter when the
  parent state is the target of a transition).

  \snippet qml/statemachine/statemachine-button-nested.qml 0

  In this case we want the application to quit when the state machine is
  finished, so the machine's finished() signal is connected to the
  application's quit() slot.

  A child state can override an inherited transition. For example, the
  following code adds a transition that effectively causes the Quit button to
  be ignored when the state machine is in state \c s12.

  \snippet qml/statemachine/statemachine-button-nested-ignore-quit.qml 0

  A transition can have any state as its target, i.e. the target state does
  not have to be on the same level in the state hierarchy as the source state.

  \section1 Using History States to Save and Restore the Current State

  Imagine that we wanted to add an "interrupt" mechanism to the example
  discussed in the previous section; the user should be able to click a button
  to have the state machine perform some non-related task, after which the
  state machine should resume whatever it was doing before (i.e. return to the
  old state, which is one of \c s11, \c s12 and \c s13 in this case).

  Such behavior can easily be modeled using \e{history states}. A history
  state (HistoryState object) is a pseudo-state that represents the child
  state that the parent state was in the last time the parent state was
  exited.

  A history state is created as a child of the state for which we wish to
  record the current child state; when the state machine detects the presence
  of such a state at runtime, it automatically records the current (real)
  child state when the parent state is exited. A transition to the history
  state is in fact a transition to the child state that the state machine had
  previously saved; the state machine automatically "forwards" the transition
  to the real child state.

  The following diagram shows the state machine after the interrupt mechanism
  has been added.

    \image statemachine-button-history.png
    \omit
    \caption This is a caption
    \endomit

  The following code shows how it can be implemented; in this example we
  simply display a message box when \c s3 is entered, then immediately return
  to the previous child state of \c s1 via the history state.

  \snippet qml/statemachine/statemachine-button-history.qml 0

  \section1 Using Parallel States to Avoid a Combinatorial Explosion of States

  Assume that you wanted to model a set of mutually exclusive properties of a
  car in a single state machine. Let's say the properties we are interested in
  are Clean vs Dirty, and Moving vs Not moving. It would take four mutually
  exclusive states and eight transitions to be able to represent and freely
  move between all possible combinations.

    \image statemachine-nonparallel.png
    \omit
    \caption This is a caption
    \endomit

  If we added a third property (say, Red vs Blue), the total number of states
  would double, to eight; and if we added a fourth property (say, Enclosed vs
  Convertible), the total number of states would double again, to 16.

  Using parallel states, the total number of states and transitions grows
  linearly as we add more properties, instead of exponentially. Furthermore,
  states can be added to or removed from the parallel state without affecting
  any of their sibling states.

    \image statemachine-parallel.png
    \omit
    \caption This is a caption
    \endomit

  To create a parallel state group, set childMode to QState.ParallelStates.

  \qml
    StateBase {
        id: s1
        childMode: QState.ParallelStates
        StateBase {
            id: s11
        }
        StateBase {
            id: s12
        }
    }
  \endqml

  When a parallel state group is entered, all its child states will be
  simultaneously entered. Transitions within the individual child states
  operate normally. However, any of the child states may take a transition which exits the parent
  state. When this happens, the parent state and all of its child states are exited.

  The parallelism in the State Machine framework follows an interleaved semantics. All parallel
  operations will be executed in a single, atomic step of the event processing, so no event can
  interrupt the parallel operations. However, events will still be processed sequentially, since
  the machine itself is single threaded. As an example: Consider the situation where there are two
  transitions that exit the same parallel state group, and their conditions become true
  simultaneously. In this case, the event that is processed last of the two will not have any
  effect, since the first event will already have caused the machine to exit from the parallel
  state.

  \section1 Detecting that a Composite State has Finished

  A child state can be final (a FinalState object); when a final child state
  is entered, the parent state emits the StateBase::finished signal. The
  following diagram shows a composite state \c s1 which does some processing
  before entering a final state:

    \image statemachine-finished.png
    \omit
    \caption This is a caption
    \endomit

  When \c s1 's final state is entered, \c s1 will automatically emit
  \l{StateBase::finished}{finished}. We use a signal transition to cause this event to
  trigger a state change:

  \qml
    StateBase {
        id: s1
        SignalTransition {
            targetState: s2
            signal: s1.finished
        }
    }
  \endqml

  Using final states in composite states is useful when you want to hide the
  internal details of a composite state; i.e. the only thing the outside world
  should be able to do is enter the state, and get a notification when the
  state has completed its work. This is a very powerful abstraction and
  encapsulation mechanism when building complex (deeply nested) state
  machines. (In the above example, you could of course create a transition
  directly from \c s1 's \c done state rather than relying on \c s1 's
  finished() signal, but with the consequence that implementation details of
  \c s1 are exposed and depended on).

  For parallel state groups, the StateBase::finished signal is emitted when \e
  all the child states have entered final states.

  \section1 Targetless Transitions

  A transition need not have a target state. A transition without a target can
  be triggered the same way as any other transition; the difference is that
  when a targetless transition is triggered, it doesn't cause any state
  changes. This allows you to react to a signal or event when your machine is
  in a certain state, without having to leave that state. Example:

  \qml
    Button {
        id: button
        text: "button"
        StateMachine {
            id: stateMachine
            initialState: s1
            running: true
            StateBase {
                id: s1
                SignalTransition {
                    signal: button.clicked
                    onTriggered: console.log("button pressed")
                }
            }
        }
    }
  \endqml

  The "button pressed" message will be displayed each time the button is clicked, but the
  state machine will remain in its current state (s1). If the target state
  were explicitly set to s1, however, s1 would be exited and re-entered each
  time (e.g. the QAbstractState::entered and QAbstractState::exited
  signals would be emitted).
*/
