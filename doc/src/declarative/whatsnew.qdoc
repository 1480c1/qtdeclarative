/****************************************************************************
**
** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\title What's New in Qt Quick
\page qtquick-whatsnew.html

\section1 Qt 5.0.0 includes QtQuick 2.0

QtQuick 2.0 is a major update.

\section2 SceneGraph renderer

QtQuick 2 is based on an OpenGL scenegraph.  The following
classes replace their equivalents in QtQuick 1:

\list
\o QSGView
\o QSGCanvas
\o QSGItem
\o QSGPaintedItem
\endlist

\section2 QML Engine/Language Improvements

JS engine changed to V8.

Parser and compiler optimizations.

New binding optimizer.

ValueType improvements:
 - QColor is now a value type.  The red, green, blue and alpha channels can be accessed via "r", "g", "b" and "a" properties
 - Improved support for QVector4D, now constructible in QML via Qt.vector4d()

Arbitrary functionality may be provided in a namespace through a Module API.  See \l{qmlRegisterModuleApi()} for more information.

JavaScript (.js) files may now import QML modules and other JavaScript files.  See \l{Importing One JavaScript File From Another} for more information.

QML properties of type \c variant can now hold pixmaps.  See \l{Scarce Resources in JavaScript} for more information

QDeclarativeExpression can now be directly (and more efficiently) constructed from a
QDeclarativeScriptString.

\section2 Canvas Item

The new \l Canvas item provides a HTML5 canvas like API, with some enhancements:
1) Supports 2 render targets: Canvas.Image and Canvas.FramebufferObject
2) Supports background thread rendering
3) Supports tiled canvas rendering

The Canvas item supports most of the HTML5 context2d APIs, the API details please look at the canvas item documentation.


\section2 Particle System

The \l{QtQuick.Particles 2}{QtQuick.Particles} module contains elements that can be composed to form 2D particle system.


\section2 Element API/Behavior Changes

New \l SpriteImage element renders animated sprites and can transition between animations.
It uses the \l Sprite element to represent each animation.

MouseArea now propagates clicked, doubleClicked and pressAndHold differently to pressed. 
These will now be propagated to the highest-stacking-order enabled MouseArea which has a handler for them.
You can still ignore these events in the handler to let them pass through.

The Binding element can now be used as a value source, and will also restore any previously
set binding when its \e when clause becomes false.

Flickable: added dragging, draggingHorizontally and draggingVerically properties.
Added topMargin, bottomMargin, leftMargin, rightMargin, xOrigin, yOrigin properties.

Image has two new properties: horizontalAlignment and verticalAlignment. It also has a new value for
fillMode (Image.Pad) that does not transform the image.

Grid now has rowSpacing and columnSpacing properties.

Positioners now have attached properties that can be used to determine a subitem's location within a
container such as Column or Row: Positioner.index, Positioner.isFirstItem, Positioner.isLastItem.

Loader improvements:
 - "active" property added to Loader, to allow delaying instantiation of a Loader element's item property
 - "setSource(JSObject)" method added to Loader to allow initial property values to be specified (similar to Component.createObject())
 - now only emits the \c sourceChanged signal when the source is changed and the
\c sourceComponentChanged signal when the sourceComponent is changed. It used to emit both signals when one of the properties was changed.

PathView now has a \c currentItem property

ListView and GridView now have headerItem and footerItem properties (the instantiated
header and footer items).

ListView section.labelPositioning property added to allow keeping the current section label
at the start and/or next section label at the end of the view.


\section2 QtQuick 1 is now a separate library and module

Writing C++ applications using QtQuick 1 specific API, i.e. QDeclarativeView or QDeclarativeItem
requires adding the "qtquick1" module to the .pro file, e.g. QT += declarative qtquick1

QDeclarativeView and QDeclarativeItem headers are now in the QtQuick 1 module, i.e.
#include <QtQuick1/QDeclarativeView>
#include <QtQuick1/QDeclarativeItem>

"import QtQuick 1.0" loads the module dynamically.  To deploy QtQuick 1 applications
the library (lib/libQtQuick1*) and plugin (imports/QtQuick/) must be installed.


\section1 Qt 4.7.4 includes QtQuick 1.1

QtQuick 1.1 is a minor feature update.  \e {import QtQuick 1.1} to use the new
features.

\section2 PinchArea

PinchArea provides support for the common two finger pinch gesture.

\section2 LayoutMirroring attached property

\l {LayoutMirroring}{Layout mirroring} is useful when you need to support both
left-to-right and right-to-left layout versions of your application that target
different language areas.

\section2 Anchors

Added the following property:
\list
\o \l {Item::}{anchors.mirrored}
\endlist

\section2 Text

Added the following properties:
\list
\o \l {Text::}{lineHeight}
\o \l {Text::}{lineHeightMode}
\o \l {Text::}{lineCount}
\o \l {Text::}{maximumLineCount}
\o \l {Text::}{truncated}
\o \l {Text::}{effectiveHorizontalAlignment}
\endlist

horizontalAlignment now accepts Text.AlignJustify alignment mode.

\section2 TextEdit

Added the following properties, methods and signal handlers:
\list
\o \l {TextEdit::}{canPaste}
\o \l {TextEdit::}{lineCount}
\o \l {TextEdit::}{inputMethodComposing}
\o \l {TextEdit::}{mouseSelectionMode}
\o \l {TextEdit::}{effectiveHorizontalAlignment}
\o \l {TextEdit::}{deselect()}
\o \l {TextEdit::}{isRightToLeft()}
\o \l {TextEdit::}{moveCursorSelection()} to enable selection by word
\o \l {TextEdit::}{onLinkActivated}
\endlist

\section2 TextInput

Added the following properties and methods:
\list
\o \l {TextInput::}{canPaste}
\o \l {TextInput::}{inputMethodComposing}
\o \l {TextInput::}{mouseSelectionMode}
\o \l {TextInput::}{effectiveHorizontalAlignment}
\o \l {TextInput::}{deselect()}
\o \l {TextInput::}{isRightToLeft()}
\o \l {TextInput::}{moveCursorSelection()} to enable selection by word
\endlist

\section2 Image, BorderImage and AnimatedImage

Added the following properties:
\list
\o \l{Image::}{cache}
\o \l{Image::}{mirror}
\endlist

\section2 Item

Added the following properties:
\list
\o \l{Item::}{implicitWidth} and \l{Item::}{implicitHeight}
\endlist

\section2 Flickable

Added the following methods:
\list
\o \l{Flickable::}{resizeContent()}
\o \l{Flickable::}{returnToBounds()}
\endlist

\section2 MouseArea

Added the following property:
\list
\o \l{MouseArea::}{preventStealing}
\endlist

\section2 ListView and GridView

Added the following properties and methods:
\list
\o \l{ListView::}{layoutDirection}
\o \l{ListView::}{effectiveLayoutDirection}
\o \l{ListView::}{positionViewAtBeginning()}
\o \l{ListView::}{positionViewAtEnd()}
\endlist

\section2 Flow, Grid and Row

Added the following properties:
\list
\o \l{Flow::}{layoutDirection}
\o \l{Flow::}{effectiveLayoutDirection}
\endlist

\section2 Repeater

Added the following methods and signal handlers:
\list
\o \l{Repeater::}{onItemAdded}
\o \l{Repeater::}{onItemRemoved}
\o \l{Repeater::}{itemAt()}
\endlist

\section2 Component

\list
\o The \l{Component::}{createObject()} method now accepts a map of initial
property values for the created object.
\endlist

\section2 Qt

\list
\o Added the \l {QML:Qt::application}{Qt.application} object to hold generic
global application properties.
\endlist

\section2 Other changes

\list
\o Functions can be \l{Property Binding#Property Binding}{assigned to properties from JavaScript}
to create property bindings.
\o QtQuick now supports Right to Left layout in positioners, views, anchors and text elements.
\endlist


\section1 Qt 4.7.1

\section2 QtQuick namespace

In prior Qt releases, all the Qt Quick elements were available in the \e Qt
namespace. Starting with Qt 4.7.1, the elements are also available in the
\e QtQuick namespace, which improves naming consistency, and allows the
development of Qt Quick to occur at a faster rate than Qt's usual minor release
schedule.

The change for developers is very simple - where you previously wrote
\e {import Qt 4.7}, just replace it with \e {import QtQuick 1.0}, like this:

\code
import QtQuick 1.0 

Text {
    text: "Welcome to QtQuick 1.0!"
}
\endcode

\e {import Qt 4.7} continues to work so existing applications won't break even
if they aren't updated, but it is recommended that all import statements be
modified to the new form.
*/
